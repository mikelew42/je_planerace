//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/InputRig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputRig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputRig()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputRig"",
    ""maps"": [
        {
            ""name"": ""Plane Control"",
            ""id"": ""58ba9df9-099e-4133-af2d-6496648cd24b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08aa6a05-39c4-400f-b030-3739fd84e666"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""16c3c49d-d3f1-4bcc-b7e1-d2cbc0a6d0e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch Control"",
                    ""type"": ""Value"",
                    ""id"": ""edc09806-95e8-41c5-9309-d8d2a6bdc838"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire1"",
                    ""type"": ""Value"",
                    ""id"": ""eeff7da2-aab5-4a24-88d0-724f1ddd80f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57e2e4a1-7ddb-4247-ad25-e88d6ec136cf"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""e061c51d-ea32-4535-b74d-b85736bc539a"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82e4ff27-9bd2-420e-b54d-5bb39e1d40f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4d73355-eca6-4a10-8157-9ee707a1c9b4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b107980-224b-45ea-9eaf-13880f69a770"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4e56c757-f776-4297-86e0-db0fcbafb729"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02fdac92-3a07-4922-b117-d6a16e58d2e9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1bb7c13e-3d95-459e-b708-b01383b40cff"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a351ac51-e9db-4b48-b625-f403565f0379"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f6c34fb8-c868-4e16-8a09-60eae7dce7f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2f5099b-439c-4d49-808f-86442750ccf0"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dde05110-4c7d-4685-aeec-cb348635233c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""QE"",
                    ""id"": ""f6d97df2-abc3-425a-b79e-1da559f57b2e"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c090092e-2aac-4046-bf5d-d568e5719ec0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a86a2c70-7b57-42bb-b0a3-2ea1bb7927d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""31db835f-46f8-4b25-8e11-251277ff0ea3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""91dafde8-78e1-48c3-ba7a-5ac8469c80ac"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4e2336a9-b02c-4817-ae77-c1691764d6ee"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114a79c4-1137-490b-8d82-320d6ed460fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plane Control
        m_PlaneControl = asset.FindActionMap("Plane Control", throwIfNotFound: true);
        m_PlaneControl_Move = m_PlaneControl.FindAction("Move", throwIfNotFound: true);
        m_PlaneControl_Look = m_PlaneControl.FindAction("Look", throwIfNotFound: true);
        m_PlaneControl_TouchControl = m_PlaneControl.FindAction("Touch Control", throwIfNotFound: true);
        m_PlaneControl_Fire1 = m_PlaneControl.FindAction("Fire1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane Control
    private readonly InputActionMap m_PlaneControl;
    private List<IPlaneControlActions> m_PlaneControlActionsCallbackInterfaces = new List<IPlaneControlActions>();
    private readonly InputAction m_PlaneControl_Move;
    private readonly InputAction m_PlaneControl_Look;
    private readonly InputAction m_PlaneControl_TouchControl;
    private readonly InputAction m_PlaneControl_Fire1;
    public struct PlaneControlActions
    {
        private @InputRig m_Wrapper;
        public PlaneControlActions(@InputRig wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlaneControl_Move;
        public InputAction @Look => m_Wrapper.m_PlaneControl_Look;
        public InputAction @TouchControl => m_Wrapper.m_PlaneControl_TouchControl;
        public InputAction @Fire1 => m_Wrapper.m_PlaneControl_Fire1;
        public InputActionMap Get() { return m_Wrapper.m_PlaneControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlaneControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaneControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaneControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @TouchControl.started += instance.OnTouchControl;
            @TouchControl.performed += instance.OnTouchControl;
            @TouchControl.canceled += instance.OnTouchControl;
            @Fire1.started += instance.OnFire1;
            @Fire1.performed += instance.OnFire1;
            @Fire1.canceled += instance.OnFire1;
        }

        private void UnregisterCallbacks(IPlaneControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @TouchControl.started -= instance.OnTouchControl;
            @TouchControl.performed -= instance.OnTouchControl;
            @TouchControl.canceled -= instance.OnTouchControl;
            @Fire1.started -= instance.OnFire1;
            @Fire1.performed -= instance.OnFire1;
            @Fire1.canceled -= instance.OnFire1;
        }

        public void RemoveCallbacks(IPlaneControlActions instance)
        {
            if (m_Wrapper.m_PlaneControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaneControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaneControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaneControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaneControlActions @PlaneControl => new PlaneControlActions(this);
    public interface IPlaneControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnTouchControl(InputAction.CallbackContext context);
        void OnFire1(InputAction.CallbackContext context);
    }
}
